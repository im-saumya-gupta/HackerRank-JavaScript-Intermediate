///////Employee Inheritance/////////

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding("ascii");
let inputString = "";
let currentLine = 0;

process.stdin.on("data", function (chunk) {
    inputString += chunk;
});
process.stdin.on("end", function () {
    inputString = inputString.split('\n');
    main();
});

function readLine() {
  return inputString[currentLine++];
}
function Employee(title) {
    this.title = title;
    this.setTitle = function(tE){
        this.title = tE;
    }
    this.getTitle=function(){
        return this.title;
    }
}
Employee.prototype.setTitle = function(tE){
    this.title = tE;
}

Employee.prototype.getTitle = function(){
    return this.title;
}

function Engineer(title, isManager) {
    Employee.call(this,title);
    this.isManager = isManager;
    this.setIsManager = function(isM){
        this.isManager = isM;
    }
    this.getIsManager = function(){
        return this.isManager;
    }
}

Engineer.prototype.setIsManager = function(tE){
    this.isManager = tE;
}

Engineer.prototype.getIsManager = function(){
    return this.isManager;
}